// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–ø–∏—Å–∞–º–∏
const Appointments = {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    init() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
        this.initAppointmentListHandlers();
    },
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
    initAppointmentListHandlers() {
        // –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
        const appointmentsList = document.getElementById('appointments-list');
        
        if (!appointmentsList) return;
        
        appointmentsList.addEventListener('click', async (e) => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –ø–æ –∫–Ω–æ–ø—Ü—ñ –¥—ñ—ó
            const button = e.target.closest('.action-btn');
            
            if (!button) return;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–ø–∏—Å—É —Ç–∞ –¥—ñ—é
            const appointmentId = button.getAttribute('data-id');
            const action = button.getAttribute('data-action');
            
            // –í–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –¥—ñ—é
            if (action === 'edit') {
                await Modals.openEditAppointmentModal(appointmentId);
            } else if (action === 'confirm') {
                await this.updateAppointmentStatus(appointmentId, 'confirmed');
            } else if (action === 'cancel') {
                await this.updateAppointmentStatus(appointmentId, 'cancelled');
            } else if (action === 'complete') {
                await this.updateAppointmentStatus(appointmentId, 'completed');
            } else if (action === 'delete') {
                await this.deleteAppointment(appointmentId);
            }
        });
    },
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É
    async loadAppointmentsForSelectedDate() {
        const appointmentsList = document.getElementById('appointments-list');
        
        if (!appointmentsList) return;
        
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            appointmentsList.innerHTML = '<div class="loader"></div>';
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            window.appState.loading.appointments = true;
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å
            const dayOfWeek = window.appState.selectedDate.getDay();
            const isWeekend = await this.checkIfWeekend(dayOfWeek);
            
            if (isWeekend) {
                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å
                appointmentsList.innerHTML = `
                    <div class="weekend-message">
                        <i class="fas fa-umbrella-beach"></i>
                        <h3>–í–∏—Ö—ñ–¥–Ω–∏–π –¥–µ–Ω—å üòå</h3>
                        <p>–°—å–æ–≥–æ–¥–Ω—ñ –≤–∏—Ö—ñ–¥–Ω–∏–π –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º. –í—ñ–¥–ø–æ—á–∏–≤–∞—î–º–æ!</p>
                    </div>
                `;
                window.appState.loading.appointments = false;
                return;
            }
            
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è API
            const formattedDate = this.formatDateForAPI(window.appState.selectedDate);
            
            console.log(`–ó–∞–ø–∏—Ç –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –¥–∞—Ç—É: ${formattedDate}`);
            console.log(`–†—ñ–∫: ${window.appState.selectedDate.getFullYear()}`);
            
            try {
                // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —á–µ—Ä–µ–∑ API
                const appointments = await apiClient.getAppointmentsByDate(formattedDate);
                
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ —ñ —á–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞–ø–∏—Å–∏ –∑ —ñ–Ω—à–∏–º —Ä–æ–∫–æ–º
                if (appointments.length === 0) {
                    // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—É –∂ –¥–∞—Ç—É, –∞–ª–µ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–æ–∫–∞–º–∏
                    try {
                        const day = window.appState.selectedDate.getDate();
                        const month = window.appState.selectedDate.getMonth() + 1;
                        
                        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π –º–µ—Ç–æ–¥ API –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ –¥–Ω–µ–º/–º—ñ—Å—è—Ü–µ–º
                        const dayMonthAppointments = await apiClient.searchAppointmentsByDayMonth(day, month);
                        
                        if (dayMonthAppointments.length > 0) {
                            // –Ø–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–∏ –∑ —ñ–Ω—à–∏–º–∏ —Ä–æ–∫–∞–º–∏, –ø–æ–∫–∞–∑—É—î–º–æ –ø—ñ–¥–∫–∞–∑–∫—É
                            const years = [...new Set(dayMonthAppointments.map(app => new Date(app.time).getFullYear()))].sort();
                            
                            if (years.length > 0) {
                                const yearsText = years.join(', ');
                                Toast.info(`–ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–∏ –Ω–∞ ${day}.${month} –≤ —ñ–Ω—à–∏—Ö —Ä–æ–∫–∞—Ö: ${yearsText}. –í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —Ä—ñ–∫ —É —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ –≤–≥–æ—Ä—ñ.`, '–ü—ñ–¥–∫–∞–∑–∫–∞', { duration: 7000 });
                            }
                        }
                    } catch (error) {
                        // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
                        console.log('–ü–æ—à—É–∫ –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –¥–Ω–µ–º —ñ –º—ñ—Å—è—Ü–µ–º –Ω–µ –≤–¥–∞–≤—Å—è:', error);
                    }
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤ —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å
                let hasInvalidData = false;
                
                // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
                const validatedAppointments = appointments.map(appointment => {
                    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —î –ø—Ä–æ–±–ª–µ–º–∏ –∑ ID –∫–ª—ñ—î–Ω—Ç–∞ –∞–±–æ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
                    // –∞–ª–µ –ù–ï —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–ø–∏—Å–∏, –∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–º—ñ—á–∞—î–º–æ –ø—Ä–æ–±–ª–µ–º–∏
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å ID –∫–ª—ñ—î–Ω—Ç–∞
                    if (!appointment.clientId || typeof appointment.clientId !== 'object') {
                        hasInvalidData = true;
                        console.warn(`–ó–∞–ø–∏—Å #${appointment._id} –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∫–ª—ñ—î–Ω—Ç–∞:`, appointment.clientId);
                    }
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å ID –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
                    if (!appointment.procedureId || typeof appointment.procedureId !== 'object') {
                        hasInvalidData = true;
                        console.warn(`–ó–∞–ø–∏—Å #${appointment._id} –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:`, appointment.procedureId);
                    }
                    
                    return appointment;
                });
                
                window.appState.appointments = validatedAppointments;
                
                // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ —î –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ
                if (hasInvalidData) {
                    Toast.warning('–î–µ—è–∫—ñ –∑–∞–ø–∏—Å–∏ –º–∞—é—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ.', '–£–≤–∞–≥–∞', { duration: 5000 });
                }
                
                // –†–µ–Ω–¥–µ—Ä—ñ–Ω–≥ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
                this.renderAppointmentsList();
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤:', error);
                Toast.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –¥–∞–Ω—ñ –∑–∞–ø–∏—Å—ñ–≤: ' + error.message);
                
                // –Ø–∫—â–æ —î –ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –¥–∞–Ω–∏—Ö, –≤—Å–µ –æ–¥–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –¥–∞–Ω—ñ —è–∫ —î
                window.appState.appointments = [];
                this.renderAppointmentsList();
            }
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            window.appState.loading.appointments = false;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤:', error);
            appointmentsList.innerHTML = `
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                    <p>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–∞–ø–∏—Å–∏: ${error.message}</p>
                </div>
            `;
            window.appState.loading.appointments = false;
        }
    },
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –æ–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å - –≤–∏—Ö—ñ–¥–Ω–∏–π
    async checkIfWeekend(dayOfWeek) {
        try {
            const daySchedule = await Schedule.getDaySchedule(dayOfWeek);
            return !daySchedule || daySchedule.isWeekend;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –¥–Ω—è:', error);
            return false;
        }
    },
    
    // –†–µ–Ω–¥–µ—Ä—ñ–Ω–≥ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
    renderAppointmentsList() {
        const appointmentsList = document.getElementById('appointments-list');
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫—É
        appointmentsList.innerHTML = '';
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
        if (!window.appState.appointments || window.appState.appointments.length === 0) {
            appointmentsList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-calendar-day"></i>
                    <h3>–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å</h3>
                    <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "+" —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å</p>
                </div>
            `;
            return;
        }
        
        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –ø–æ —á–∞—Å—É
        const sortedAppointments = [...window.appState.appointments].sort((a, b) => {
            return new Date(a.time) - new Date(b.time);
        });
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –¥–æ —Å–ø–∏—Å–∫—É
        sortedAppointments.forEach((appointment, index) => {
            const appointmentTime = new Date(appointment.time);
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞
            const hasValidClient = appointment.clientId && typeof appointment.clientId === 'object';
            let clientName = '–ö–ª—ñ—î–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ';
            let clientWarning = '';
            
            if (hasValidClient) {
                clientName = `${appointment.clientId.name || ''} ${appointment.clientId.surName || ''}`.trim();
                if (!clientName) {
                    clientName = '–Ü–º\'—è –∫–ª—ñ—î–Ω—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—î';
                }
            } else {
                clientWarning = `<div class="appointment-warning">
                    <i class="fas fa-exclamation-triangle"></i> –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –∫–ª—ñ—î–Ω—Ç–∞
                </div>`;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
            const hasValidProcedure = appointment.procedureId && typeof appointment.procedureId === 'object';
            let procedureName = '–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞';
            let procedureWarning = '';
            let durationMinutes = 60; // –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            
            if (hasValidProcedure) {
                procedureName = appointment.procedureId.name || '–ù–∞–∑–≤–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—è';
                durationMinutes = appointment.procedureId.timeToComplete || 60;
            } else {
                procedureWarning = `<div class="appointment-warning">
                    <i class="fas fa-exclamation-triangle"></i> –ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
                </div>`;
            }
            
            // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
            const endTime = new Date(appointmentTime);
            endTime.setMinutes(endTime.getMinutes() + durationMinutes);
            
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
            const startTimeStr = this.formatTime(appointmentTime);
            const endTimeStr = this.formatTime(endTime);
            
            // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Å—Ç–∞—Ç—É—Å—É
            let statusText = '';
            let statusClass = '';
            switch (appointment.status) {
                case 'pending':
                    statusText = '–û—á—ñ–∫—É—î';
                    statusClass = 'status-pending';
                    break;
                case 'confirmed':
                    statusText = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ';
                    statusClass = 'status-confirmed';
                    break;
                case 'completed':
                    statusText = '–í–∏–∫–æ–Ω–∞–Ω–æ';
                    statusClass = 'status-completed';
                    break;
                case 'cancelled':
                    statusText = '–°–∫–∞—Å–æ–≤–∞–Ω–æ';
                    statusClass = 'status-cancelled';
                    break;
                default:
                    statusText = '–ù–µ–≤—ñ–¥–æ–º–∏–π';
                    statusClass = 'status-pending';
            }
            
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
            const price = appointment.finalPrice || appointment.price || 0;
            const formattedPrice = this.formatCurrency(price);
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å—É
            const appointmentElement = document.createElement('div');
            appointmentElement.className = `appointment-item ${appointment.status || 'pending'}`;
            appointmentElement.setAttribute('data-delay', index); // –î–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
            appointmentElement.innerHTML = `
                <div class="appointment-time">
                    <i class="fas fa-clock"></i>
                    ${startTimeStr} - ${endTimeStr}
                </div>
                <div class="appointment-client">
                    <i class="fas fa-user"></i>
                    ${clientName}
                </div>
                ${clientWarning}
                <div class="appointment-service">${procedureName} ‚Ä¢ ${formattedPrice}</div>
                ${procedureWarning}
                <div><span class="status ${statusClass}">${statusText}</span></div>
                ${appointment.notes ? `<div class="appointment-notes">${appointment.notes}</div>` : ''}
                <div class="appointment-actions">
                    ${appointment.status === 'pending' ? `<button class="action-btn btn-confirm" data-id="${appointment._id}" data-action="confirm"><i class="fas fa-check"></i> –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏</button>` : ''}
                    ${appointment.status === 'confirmed' ? `<button class="action-btn btn-confirm" data-id="${appointment._id}" data-action="complete"><i class="fas fa-check-double"></i> –í–∏–∫–æ–Ω–∞–Ω–æ</button>` : ''}
                    <button class="action-btn btn-edit" data-id="${appointment._id}" data-action="edit"><i class="fas fa-edit"></i> –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                    ${appointment.status !== 'cancelled' ? `<button class="action-btn btn-cancel" data-id="${appointment._id}" data-action="cancel"><i class="fas fa-ban"></i> –°–∫–∞—Å—É–≤–∞—Ç–∏</button>` : ''}
                    ${appointment.status === 'cancelled' ? `<button class="action-btn btn-cancel" data-id="${appointment._id}" data-action="delete"><i class="fas fa-trash"></i> –í–∏–¥–∞–ª–∏—Ç–∏</button>` : ''}
                </div>
            `;
            
            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–æ —Å–ø–∏—Å–∫—É
            appointmentsList.appendChild(appointmentElement);
        });
    },
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Å—É
    async updateAppointmentStatus(appointmentId, status) {
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø—ñ–Ω–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const button = document.querySelector(`.action-btn[data-id="${appointmentId}"][data-action="${status === 'confirmed' ? 'confirm' : status === 'cancelled' ? 'cancel' : 'complete'}"]`);
            
            if (button) {
                button.innerHTML = `<div class="btn-loader"></div>`;
                button.disabled = true;
            }
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
            await apiClient.updateAppointment(appointmentId, { status });
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            const statusText = status === 'confirmed' ? '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' : 
                               status === 'cancelled' ? '—Å–∫–∞—Å–æ–≤–∞–Ω–æ' : 
                               '–ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π';
            Toast.success(`–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ ${statusText}.`);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤
            await this.loadAppointmentsForSelectedDate();
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Å—É –Ω–∞ "${status}":`, error);
            Toast.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É. ${error.message}`);
            
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            const button = document.querySelector(`.action-btn[data-id="${appointmentId}"][data-action="${status === 'confirmed' ? 'confirm' : status === 'cancelled' ? 'cancel' : 'complete'}"]`);
            
            if (button) {
                button.innerHTML = status === 'confirmed' ? '<i class="fas fa-check"></i> –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' : 
                                  status === 'cancelled' ? '<i class="fas fa-ban"></i> –°–∫–∞—Å—É–≤–∞—Ç–∏' : 
                                  '<i class="fas fa-check-double"></i> –í–∏–∫–æ–Ω–∞–Ω–æ';
                button.disabled = false;
            }
        }
    },
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
    async deleteAppointment(appointmentId) {
        // –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?')) return;
        
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø—ñ–Ω–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const button = document.querySelector(`.action-btn[data-id="${appointmentId}"][data-action="delete"]`);
            
            if (button) {
                button.innerHTML = `<div class="btn-loader"></div>`;
                button.disabled = true;
            }
            
            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
            await apiClient.deleteAppointment(appointmentId);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            Toast.success('–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.');
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤
            await this.loadAppointmentsForSelectedDate();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:', error);
            Toast.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å. ${error.message}`);
            
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            const button = document.querySelector(`.action-btn[data-id="${appointmentId}"][data-action="delete"]`);
            
            if (button) {
                button.innerHTML = '<i class="fas fa-trash"></i> –í–∏–¥–∞–ª–∏—Ç–∏';
                button.disabled = false;
            }
        }
    },
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ (–¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
    async getAppointmentsByPeriod(startDate, endDate) {
        try {
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç –¥–ª—è API
            const formattedStartDate = startDate instanceof Date ? 
                this.formatDateForAPI(startDate) : startDate;
            
            const formattedEndDate = endDate instanceof Date ? 
                this.formatDateForAPI(endDate) : endDate;
            
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —á–µ—Ä–µ–∑ API
            return await apiClient.getAppointmentsByPeriod(formattedStartDate, formattedEndDate);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥:', error);
            return [];
        }
    },
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è API
    formatDateForAPI(date) {
        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
    },
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
    formatTime(date) {
        return `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
    },
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
    formatCurrency(amount) {
        return new Intl.NumberFormat('uk-UA', {
            style: 'currency',
            currency: 'UAH',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    }
};