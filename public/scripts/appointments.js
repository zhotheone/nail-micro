// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∑–∞–ø–∏—Å–∞–º–∏
const Appointments = {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    init() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
        this.initAppointmentListHandlers();
    },
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
    initAppointmentListHandlers() {
        // –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
        const appointmentsList = document.getElementById('appointments-list');
        
        if (!appointmentsList) return;
        
        appointmentsList.addEventListener('click', async (e) => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –ø–æ –∫–Ω–æ–ø—Ü—ñ –¥—ñ—ó
            const button = e.target.closest('.action-btn');
            
            if (!button) return;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ ID –∑–∞–ø–∏—Å—É —Ç–∞ –¥—ñ—é
            const appointmentId = button.getAttribute('data-id');
            const action = button.getAttribute('data-action');
            
            // –í–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –¥—ñ—é
            if (action === 'edit') {
                await Modals.openEditAppointmentModal(appointmentId);
            } else if (action === 'confirm') {
                await this.updateAppointmentStatus(appointmentId, 'confirmed');
            } else if (action === 'cancel') {
                await this.updateAppointmentStatus(appointmentId, 'cancelled');
            } else if (action === 'complete') {
                await this.updateAppointmentStatus(appointmentId, 'completed');
            } else if (action === 'delete') {
                await this.deleteAppointment(appointmentId);
            }
        });
    },
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ –≤–∏–±—Ä–∞–Ω—É –¥–∞—Ç—É
    async loadAppointmentsForSelectedDate() {
        const appointmentsList = document.getElementById('appointments-list');
        
        if (!appointmentsList) return;
        
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            appointmentsList.innerHTML = '<div class="loader"></div>';
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            window.appState.loading.appointments = true;
            
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è API
            const formattedDate = this.formatDateForAPI(window.appState.selectedDate);
            
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —á–µ—Ä–µ–∑ API
            const appointments = await apiClient.getAppointmentsByDate(formattedDate);
            window.appState.appointments = appointments;
            
            // –†–µ–Ω–¥–µ—Ä—ñ–Ω–≥ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
            this.renderAppointmentsList();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            window.appState.loading.appointments = false;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤:', error);
            appointmentsList.innerHTML = `
                <div class="error-message">
                    –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤: ${error.message}
                </div>
            `;
            window.appState.loading.appointments = false;
        }
    },
    
    // –†–µ–Ω–¥–µ—Ä—ñ–Ω–≥ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å—ñ–≤
    renderAppointmentsList() {
        const appointmentsList = document.getElementById('appointments-list');
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫—É
        appointmentsList.innerHTML = '';
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–ø–∏—Å—ñ–≤
        if (!window.appState.appointments || window.appState.appointments.length === 0) {
            appointmentsList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-calendar-day"></i>
                    <h3>–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –Ω–∞ —Ü–µ–π –¥–µ–Ω—å</h3>
                    <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "+" —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å</p>
                </div>
            `;
            return;
        }
        
        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –ø–æ —á–∞—Å—É
        const sortedAppointments = [...window.appState.appointments].sort((a, b) => {
            return new Date(a.time) - new Date(b.time);
        });
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –¥–æ —Å–ø–∏—Å–∫—É
        sortedAppointments.forEach(appointment => {
            const appointmentTime = new Date(appointment.time);
            
            // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
            const procedure = appointment.procedureId;
            const durationMinutes = procedure ? procedure.timeToComplete : 60;
            
            // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —á–∞—Å—É –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
            const endTime = new Date(appointmentTime);
            endTime.setMinutes(endTime.getMinutes() + durationMinutes);
            
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
            const startTimeStr = this.formatTime(appointmentTime);
            const endTimeStr = this.formatTime(endTime);
            
            // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Å—Ç–∞—Ç—É—Å—É
            let statusText = '';
            let statusClass = '';
            switch (appointment.status) {
                case 'pending':
                    statusText = '–û—á—ñ–∫—É—î';
                    statusClass = 'status-pending';
                    break;
                case 'confirmed':
                    statusText = '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ';
                    statusClass = 'status-confirmed';
                    break;
                case 'completed':
                    statusText = '–í–∏–∫–æ–Ω–∞–Ω–æ';
                    statusClass = 'status-completed';
                    break;
                case 'cancelled':
                    statusText = '–°–∫–∞—Å–æ–≤–∞–Ω–æ';
                    statusClass = 'status-cancelled';
                    break;
            }
            
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
            const price = appointment.finalPrice || appointment.price;
            const formattedPrice = this.formatCurrency(price);
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å—É
            const appointmentElement = document.createElement('div');
            appointmentElement.className = 'appointment-item';
            appointmentElement.innerHTML = `
                <div class="appointment-time">${startTimeStr} - ${endTimeStr}</div>
                <div class="appointment-client">${appointment.clientId.name} ${appointment.clientId.surName}</div>
                <div class="appointment-service">${procedure ? procedure.name : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞'} ‚Ä¢ ${formattedPrice}</div>
                <div><span class="status ${statusClass}">${statusText}</span></div>
                <div class="appointment-actions">
                    ${appointment.status === 'pending' ? `<button class="action-btn btn-confirm" data-id="${appointment._id}" data-action="confirm">‚úì –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏</button>` : ''}
                    ${appointment.status === 'confirmed' ? `<button class="action-btn btn-confirm" data-id="${appointment._id}" data-action="complete">‚úì –í–∏–∫–æ–Ω–∞–Ω–æ</button>` : ''}
                    <button class="action-btn btn-edit" data-id="${appointment._id}" data-action="edit">‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏</button>
                    ${appointment.status !== 'cancelled' ? `<button class="action-btn btn-cancel" data-id="${appointment._id}" data-action="cancel">‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏</button>` : ''}
                    ${appointment.status === 'cancelled' ? `<button class="action-btn btn-cancel" data-id="${appointment._id}" data-action="delete">üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏</button>` : ''}
                </div>
            `;
            
            // –î–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–æ —Å–ø–∏—Å–∫—É
            appointmentsList.appendChild(appointmentElement);
        });
    },
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Å—É
    async updateAppointmentStatus(appointmentId, status) {
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø—ñ–Ω–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const button = document.querySelector(`.action-btn[data-id="${appointmentId}"][data-action="${status === 'confirmed' ? 'confirm' : status === 'cancelled' ? 'cancel' : 'complete'}"]`);
            
            if (button) {
                button.innerHTML = `<div class="btn-loader"></div>`;
                button.disabled = true;
            }
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
            await apiClient.updateAppointment(appointmentId, { status });
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            const statusText = status === 'confirmed' ? '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ' : 
                               status === 'cancelled' ? '—Å–∫–∞—Å–æ–≤–∞–Ω–æ' : 
                               '–ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ –≤–∏–∫–æ–Ω–∞–Ω–∏–π';
            Toast.success(`–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ ${statusText}.`);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤
            await this.loadAppointmentsForSelectedDate();
        } catch (error) {
            console.error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∑–∞–ø–∏—Å—É –Ω–∞ "${status}":`, error);
            Toast.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å—É. ${error.message}`);
            
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            const button = document.querySelector(`.action-btn[data-id="${appointmentId}"][data-action="${status === 'confirmed' ? 'confirm' : status === 'cancelled' ? 'cancel' : 'complete'}"]`);
            
            if (button) {
                button.innerHTML = status === 'confirmed' ? '‚úì –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏' : 
                                  status === 'cancelled' ? '‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏' : 
                                  '‚úì –í–∏–∫–æ–Ω–∞–Ω–æ';
                button.disabled = false;
            }
        }
    },
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
    async deleteAppointment(appointmentId) {
        // –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∑–∞–ø–∏—Å?')) return;
        
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø—ñ–Ω–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const button = document.querySelector(`.action-btn[data-id="${appointmentId}"][data-action="delete"]`);
            
            if (button) {
                button.innerHTML = `<div class="btn-loader"></div>`;
                button.disabled = true;
            }
            
            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
            await apiClient.deleteAppointment(appointmentId);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            Toast.success('–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.');
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤
            await this.loadAppointmentsForSelectedDate();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É:', error);
            Toast.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å. ${error.message}`);
            
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            const button = document.querySelector(`.action-btn[data-id="${appointmentId}"][data-action="delete"]`);
            
            if (button) {
                button.innerHTML = 'üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏';
                button.disabled = false;
            }
        }
    },
    
    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥ (–¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è)
    async getAppointmentsByPeriod(startDate, endDate) {
        try {
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç –¥–ª—è API
            const formattedStartDate = startDate instanceof Date ? 
                this.formatDateForAPI(startDate) : startDate;
            
            const formattedEndDate = endDate instanceof Date ? 
                this.formatDateForAPI(endDate) : endDate;
            
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ —á–µ—Ä–µ–∑ API
            return await apiClient.getAppointmentsByPeriod(formattedStartDate, formattedEndDate);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –ø–µ—Ä—ñ–æ–¥:', error);
            return [];
        }
    },
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è API
    formatDateForAPI(date) {
        return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
    },
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É
    formatTime(date) {
        return `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;
    },
    
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –≤–∞–ª—é—Ç–∏
    formatCurrency(amount) {
        return new Intl.NumberFormat('uk-UA', {
            style: 'currency',
            currency: 'UAH',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount);
    }
};