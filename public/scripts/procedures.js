// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏
const Procedures = {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
    init() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä
        this.initProcedureListHandlers();
    },
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä
    initProcedureListHandlers() {
        // –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π –¥–ª—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä
        const proceduresList = document.getElementById('procedures-list');
        
        if (!proceduresList) return;
        
        proceduresList.addEventListener('click', async (e) => {
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –ø–æ –∫–Ω–æ–ø—Ü—ñ –¥—ñ—ó
            const button = e.target.closest('.action-btn');
            
            if (!button) return;
            
            // –û—Ç—Ä–∏–º—É—î–º–æ ID –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ —Ç–∞ –¥—ñ—é
            const procedureId = button.getAttribute('data-id');
            const action = button.getAttribute('data-action');
            
            // –í–∏–∫–æ–Ω—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –¥—ñ—é
            if (action === 'edit-procedure') {
                await this.openEditProcedureModal(procedureId);
            } else if (action === 'delete-procedure') {
                await this.deleteProcedure(procedureId);
            }
        });
    },
    
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä
    async loadProcedures() {
        const proceduresList = document.getElementById('procedures-list');
        
        if (!proceduresList) return;
        
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            proceduresList.innerHTML = '<div class="loader"></div>';
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            window.appState.loading.procedures = true;
            
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä —á–µ—Ä–µ–∑ API
            const procedures = await apiClient.getProcedures();
            window.appState.procedures = procedures;
            
            // –†–µ–Ω–¥–µ—Ä—ñ–Ω–≥ —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä
            this.renderProceduresList();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            window.appState.loading.procedures = false;
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä:', error);
            proceduresList.innerHTML = `
                <div class="error-message">
                    –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä: ${error.message}
                </div>
            `;
            window.appState.loading.procedures = false;
        }
    },
    
    // –†–µ–Ω–¥–µ—Ä—ñ–Ω–≥ —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä
    renderProceduresList() {
        const proceduresList = document.getElementById('procedures-list');
        
        // –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫—É
        proceduresList.innerHTML = '';
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä
        if (!window.appState.procedures || window.appState.procedures.length === 0) {
            proceduresList.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-paint-brush"></i>
                    <h3>–ù–µ–º–∞—î –ø—Ä–æ—Ü–µ–¥—É—Ä</h3>
                    <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "+" —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –ø—Ä–æ—Ü–µ–¥—É—Ä—É</p>
                </div>
            `;
            return;
        }
        
        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä –∑–∞ —Ü—ñ–Ω–æ—é
        const sortedProcedures = [...window.appState.procedures].sort((a, b) => {
            return a.price - b.price;
        });
        
        // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ—à—É–∫—É —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const filterContainer = document.createElement('div');
        filterContainer.className = 'filter-container';
        filterContainer.innerHTML = `
            <div class="form-group">
                <input type="search" id="procedure-search" class="form-control" placeholder="–ü–æ—à—É–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä...">
            </div>
            <div class="form-group">
                <select id="procedure-sort" class="form-control">
                    <option value="name">–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ –Ω–∞–∑–≤–æ—é</option>
                    <option value="price" selected>–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —Ü—ñ–Ω–æ—é</option>
                    <option value="duration">–°–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é</option>
                </select>
            </div>
        `;
        
        proceduresList.appendChild(filterContainer);
        
        // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä
        const listContainer = document.createElement('div');
        listContainer.id = 'procedures-list-container';
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä –¥–æ —Å–ø–∏—Å–∫—É
        sortedProcedures.forEach(procedure => {
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
            let durationText = '';
            if (procedure.timeToComplete < 60) {
                durationText = `${procedure.timeToComplete} —Ö–≤`;
            } else {
                const hours = Math.floor(procedure.timeToComplete / 60);
                const minutes = procedure.timeToComplete % 60;
                durationText = hours > 0 ? `${hours} –≥–æ–¥` : '';
                durationText += minutes > 0 ? ` ${minutes} —Ö–≤` : '';
            }
            
            // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
            const formattedPrice = new Intl.NumberFormat('uk-UA', {
                style: 'currency',
                currency: 'UAH',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(procedure.price);
            
            const procedureElement = document.createElement('div');
            procedureElement.className = 'list-item';
            procedureElement.setAttribute('data-name', procedure.name);
            procedureElement.setAttribute('data-price', procedure.price);
            procedureElement.setAttribute('data-duration', procedure.timeToComplete);
            
            procedureElement.innerHTML = `
                <div class="list-item-details">
                    <h3>${procedure.name}</h3>
                    <p>${formattedPrice} ‚Ä¢ ${durationText}</p>
                </div>
                <div class="list-item-actions">
                    <button class="action-btn btn-edit" data-id="${procedure._id}" data-action="edit-procedure">‚úèÔ∏è</button>
                    <button class="action-btn btn-cancel" data-id="${procedure._id}" data-action="delete-procedure">üóëÔ∏è</button>
                </div>
            `;
            
            listContainer.appendChild(procedureElement);
        });
        
        proceduresList.appendChild(listContainer);
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ—à—É–∫—É —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        const searchInput = document.getElementById('procedure-search');
        const sortSelect = document.getElementById('procedure-sort');
        
        searchInput.addEventListener('input', this.filterProcedures);
        sortSelect.addEventListener('change', this.sortProcedures);
    },
    
    // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ–¥—É—Ä –ø—Ä–∏ –ø–æ—à—É–∫—É
    filterProcedures() {
        const query = this.value.toLowerCase();
        const procedureItems = document.querySelectorAll('#procedures-list-container .list-item');
        
        procedureItems.forEach(item => {
            const name = item.getAttribute('data-name').toLowerCase();
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Å–ø—ñ–≤–ø–∞–¥–∞—î –∑–∞–ø–∏—Ç –∑ –Ω–∞–∑–≤–æ—é
            if (name.includes(query)) {
                item.style.display = '';
            } else {
                item.style.display = 'none';
            }
        });
    },
    
    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä
    sortProcedures() {
        const sortBy = this.value;
        const procedureItems = Array.from(document.querySelectorAll('#procedures-list-container .list-item'));
        const container = document.getElementById('procedures-list-container');
        
        // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        procedureItems.sort((a, b) => {
            if (sortBy === 'name') {
                return a.getAttribute('data-name').localeCompare(b.getAttribute('data-name'));
            } else if (sortBy === 'price') {
                return parseFloat(a.getAttribute('data-price')) - parseFloat(b.getAttribute('data-price'));
            } else if (sortBy === 'duration') {
                return parseInt(a.getAttribute('data-duration')) - parseInt(b.getAttribute('data-duration'));
            }
            return 0;
        });
        
        // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        container.innerHTML = '';
        procedureItems.forEach(item => {
            container.appendChild(item);
        });
    },
    
    // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    async openEditProcedureModal(procedureId) {
        try {
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ –∑–∞ ID
            const procedure = await apiClient.getProcedure(procedureId);
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞, —è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î
            if (!document.getElementById('edit-procedure-modal')) {
                this.createEditProcedureModal();
            }
            
            // –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ –¥–∞–Ω–∏–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
            const form = document.getElementById('edit-procedure-form');
            form.querySelector('[name="id"]').value = procedure._id;
            form.querySelector('[name="name"]').value = procedure.name;
            form.querySelector('[name="price"]').value = procedure.price;
            form.querySelector('[name="timeToComplete"]').value = procedure.timeToComplete;
            
            // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            Modals.open('edit-procedure-modal');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–æ—Ä–º–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:', error);
            Toast.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏.');
        }
    },
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    createEditProcedureModal() {
        const modal = document.createElement('div');
        modal.className = 'modal';
        modal.id = 'edit-procedure-modal';
        
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <div class="modal-title">–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏</div>
                    <button class="modal-close">&times;</button>
                </div>
                <form id="edit-procedure-form">
                    <input type="hidden" name="id">
                    <div class="form-group">
                        <label class="form-label">–ù–∞–∑–≤–∞</label>
                        <input type="text" class="form-control" name="name" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">–¶—ñ–Ω–∞ (–≥—Ä–Ω)</label>
                        <input type="number" class="form-control" name="price" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (—Ö–≤)</label>
                        <input type="number" class="form-control" name="timeToComplete" required>
                    </div>
                    <button type="submit" class="btn-primary">
                        <span class="btn-text">–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏</span>
                        <span class="btn-loader"></span>
                    </button>
                </form>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∏
        const form = document.getElementById('edit-procedure-form');
        form.addEventListener('submit', this.handleEditProcedureSubmit.bind(this));
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
        modal.querySelector('.modal-close').addEventListener('click', () => {
            Modals.close('edit-procedure-modal');
        });
        
        // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É –Ω–∞ —Ñ–æ–Ω
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                Modals.close('edit-procedure-modal');
            }
        });
    },
    
    // –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    async handleEditProcedureSubmit(e) {
        e.preventDefault();
        
        try {
            // –§–æ—Ä–º–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
            const form = e.target;
            
            // –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏
            Forms.setFormLoading(form, true);
            
            // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
            const formData = new FormData(form);
            const procedureId = formData.get('id');
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
            const procedureData = {
                name: formData.get('name'),
                price: parseFloat(formData.get('price')),
                timeToComplete: parseInt(formData.get('timeToComplete'))
            };
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
            if (!procedureData.name || isNaN(procedureData.price) || isNaN(procedureData.timeToComplete)) {
                Toast.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ.');
                Forms.setFormLoading(form, false);
                return;
            }
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ —á–µ—Ä–µ–∑ API
            await apiClient.updateProcedure(procedureId, procedureData);
            
            // –£—Å–ø—ñ—à–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            Toast.success('–ü—Ä–æ—Ü–µ–¥—É—Ä—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.');
            
            // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
            Modals.close('edit-procedure-modal');
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—Ä–æ—Ü–µ–¥—É—Ä
            await this.loadProcedures();
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç—ñ–≤ –∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏
            Forms.loadProcedureSelect('booking-procedure-select');
            Forms.loadProcedureSelect('edit-appointment-procedure');
            
            // –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∏
            Forms.setFormLoading(form, false);
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:', error);
            Toast.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É. ' + error.message);
            Forms.setFormLoading(e.target, false);
        }
    },
    
    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
    async deleteProcedure(procedureId) {
        // –ó–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if (!confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É?')) return;
        
        try {
            // –ü–æ–∫–∞–∑—É—î–º–æ —Å–ø—ñ–Ω–µ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            const button = document.querySelector(`.action-btn[data-id="${procedureId}"][data-action="delete-procedure"]`);
            
            if (button) {
                button.innerHTML = `<div class="btn-loader"></div>`;
                button.disabled = true;
            }
            
            // –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏
            await apiClient.deleteProcedure(procedureId);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
            Toast.success('–ü—Ä–æ—Ü–µ–¥—É—Ä—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.');
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä
            await this.loadProcedures();
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ–ª–µ–∫—Ç—ñ–≤ –∑ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏
            Forms.loadProcedureSelect('booking-procedure-select');
            Forms.loadProcedureSelect('edit-appointment-procedure');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∏:', error);
            Toast.error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—É. ${error.message}`);
            
            // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É
            const button = document.querySelector(`.action-btn[data-id="${procedureId}"][data-action="delete-procedure"]`);
            
            if (button) {
                button.innerHTML = 'üóëÔ∏è';
                button.disabled = false;
            }
        }
    }
};